// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  role          String     @default("patient")
  accounts      Account[]
  sessions      Session[]
  question      Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  password          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

model Article {
  articleId String  @unique
  title     String
  images    String?
  content   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("article")
}

model Assistant {
  assistantId String @id @default(cuid())
  name        String
  model       String
  image       String
  description String
  point       Int    @default(0)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Question  Question[]

  @@map("assistant")
}

model Question {
  questionId  String  @id @unique @default(cuid())
  question    String
  answer      String?
  pending     Boolean @default(true)
  assistantId String
  userId      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  assistant Assistant @relation(fields: [assistantId], references: [assistantId], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("question")
}
